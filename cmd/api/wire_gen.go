// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"blog-api/application/usecase"
	"blog-api/config"
	"blog-api/infrastructure"
	"blog-api/interface/api/graphql/handler"
	"blog-api/interface/api/middleware"
	"blog-api/interface/api/rest"
	"blog-api/interface/api/router"
	"fmt"
	"github.com/google/wire"
	"net/http"
	"time"
)

// Injectors from wire.go:

func InitializeServer() (*http.Server, func(), error) {
	userRepository := infrastructure.NewUserRepository()
	userUseCase := usecase.NewUserUsecase(userRepository)
	userHandler := handler.NewUserHandler(userUseCase)
	configConfig := config.NewConfig()
	contentRepository := infrastructure.NewContentRepository(configConfig)
	contentUseCase := usecase.NewContentUsecase(contentRepository)
	contentHandler := handler.NewContentHandler(contentUseCase)
	handlerHandler := handler.NewHandler(userHandler, contentHandler)
	restContentHandler := rest.NewContentHandler(contentUseCase)
	restHandler := rest.NewRestHandler(restContentHandler)
	httpHandler := router.Route(handlerHandler, restHandler)
	server := ProvideServer(httpHandler, configConfig)
	return server, func() {
	}, nil
}

// wire.go:

var initSet = wire.NewSet(config.NewConfig)

var infraSet = wire.NewSet(infrastructure.NewContentRepository, infrastructure.NewUserRepository)

var usecaseSet = wire.NewSet(usecase.NewContentUsecase, usecase.NewUserUsecase)

func ProvideServer(h http.Handler, c *config.Config) *http.Server {
	handler2 := middleware.SetMiddleware(h)
	return &http.Server{
		Addr:              fmt.Sprintf(":%v", c.Port),
		Handler:           handler2,
		ReadHeaderTimeout: 30 * time.Second,
	}
}

var handlerSet = wire.NewSet(handler.NewContentHandler, handler.NewUserHandler, handler.NewHandler, rest.NewRestHandler, rest.NewContentHandler, router.Route, ProvideServer)
